package gui;

import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;

import processing.core.*;

public class Zoom extends PApplet implements MouseListener{
	
	Zoom z;
	
	public void setup(){
		size(500,500);
		z = new Zoom();
		app.addMouseListener(this);
	}
	
	public void draw(){
		background(255);
		pushMatrix();
		z.run();
		ellipse(0,0,10,10);
		popMatrix();
	}
	
	//*****

	// The scale of our world
	private float zoom;
	// A vector to store the offset from the center
	private PVector offset;
	// The previous offset
	private PVector poffset;
	// A vector for the mouse position
	private PVector zMouse;
	public PApplet app;

	public Zoom(PApplet app) {
		this.app = app;
		zoom = 1;
		offset = new PVector(0, 0);
		poffset = new PVector(0, 0);
		zMouse = new PVector(0, 0);
		app.addMouseListener(this);
	}
	
	public Zoom() {
		zoom = 1;
		offset = new PVector(0, 0);
		poffset = new PVector(0, 0);
		zMouse = new PVector(0, 0);
	}

	public void run() {
		// Everything must be drawn relative to center
		app.translate(app.width / 2, app.height / 2);
		// Use scale for 2D "zoom"
		app.scale(zoom);
		// The offset (note how we scale according to the zoom)
		app.translate(offset.x / zoom, offset.y / zoom);
	}

	public void pOffset() {
		poffset.set(offset);
	}

	public void setCanvasMouse(PVector canvasMouse) {
		zMouse = canvasMouse;
	}

	public PVector getMouse() {
		return zMouse;
	}

	public void pan(PVector canvasMouse) {
		offset.x = canvasMouse.x - zMouse.x + poffset.x;
		offset.y = canvasMouse.y - zMouse.y + poffset.y;
	}

	public float getValue() {
		return zoom;
	}

	public PVector getOffset() {
		return offset;
	}

	public PVector getPOffset() {
		return poffset;
	}

	public void in(float val) {
		zoom += val;
	}

	public void out(float val) {
		zoom -= val;
	}

	public void setValue(float val) {
		zoom = val;
	}

	@Override
	public void mouseClicked(MouseEvent arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseEntered(MouseEvent arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseExited(MouseEvent arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mousePressed(MouseEvent arg0) {
		  setCanvasMouse(new PVector(app.mouseX, app.mouseY));
		  pOffset();
		
	}

	@Override
	public void mouseReleased(MouseEvent arg0) {
		// TODO Auto-generated method stub
		
	}
}
