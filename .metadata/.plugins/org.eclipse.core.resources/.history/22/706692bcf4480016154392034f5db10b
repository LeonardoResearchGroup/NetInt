package utilities.visualArrangements;

import java.awt.Dimension;
import java.util.ArrayList;

import edu.uci.ics.jung.graph.Graph;
import graphElements.Edge;
import graphElements.Node;
import visualElements.VEdge;
import visualElements.VNode;
import visualElements.interactive.VisualAtom;

public class SubContainer extends Container {

	Container sourceContainer;

	public SubContainer(Graph<Node,Edge> subGraph, Container container, int kindOfLayout, Dimension dimension) {
		super(container.app, container.getGraph(), kindOfLayout, dimension);
		this.sourceContainer = container;
		// Extraction of visual elements
		retrieveVisualElements(subGraph);
		remakeVisualElements();
	}

	/**
	 * Get instances of the visual elements from a given graph (usually
	 * rootGraph) that are included in the Container's subGraph
	 * 
	 * @param container
	 */
	private void retrieveVisualElements(Graph<Node,Edge> subGraph) {
		// For each node of Graph
		for (Node n : subGraph.getVertices()) {

			// Look for the corresponding VNode in the collection of VAtoms
			for (VisualAtom vAtm : sourceContainer.getVNodes()) {

				// Get only the visualAtoms that are visual Nodes
				if (VNode.class.isInstance(vAtm)) {
					VNode vN = (VNode) vAtm;

					// If the current node of the subGraph matches the node of
					// the visual node retrieved from the collection of visual
					// atoms
					if (n.equals(vN.getNode())) {
						// Add the VNode to the collection of vAtoms of this
						// container
						vNodes.add(vN);
						// Look for all the edges of that VNode and add them all
						// to the collection of vEdges of this container
						vEdgeRetriever(vN, sourceContainer.getVEdges());
					}
				}
			}
		}
	}
	
	/**
	 * Edges retriever (For SubGraphs). Invoked by retrieveVisualElements()
	 * 
	 * @param vNode
	 * @param rootEdgeList
	 */
	private void vEdgeRetriever(VNode vNode, ArrayList<VEdge> rootEdgeList) {
		for (VEdge vEdg : rootEdgeList) {
			// Check if the VNode source matches any of the VEdge sources in the
			// rootGraph
			if (vEdg.getSource().equals(vNode))
				vEdges.add(vEdg);
		}
	}
	
}
