package utilities.visualArrangements;

import processing.core.*;
import visualElements.VEdge;
import visualElements.VNode;
import visualElements.interactive.VisualAtom;

import java.awt.Dimension;
import java.util.ArrayList;

import edu.uci.ics.jung.algorithms.layout.SpringLayout;
import edu.uci.ics.jung.algorithms.util.IterativeContext;
import edu.uci.ics.jung.algorithms.layout.AbstractLayout;
import edu.uci.ics.jung.algorithms.layout.CircleLayout;
import edu.uci.ics.jung.graph.Graph;
import graphElements.*;

/**
 * This class contains two collections, one for the visualNodes and one for the
 * visualEdges.
 * 
 * @author jsalam
 * 
 */
public class RootContainer extends Container{
	
	/**
	 * Constructor to be used with instances of edu.uci.ics.jung.graph
	 * 
	 * @param app
	 * @param graph
	 *            The graph
	 * @param kindOfLayout
	 *            Integer defining the kind of layout
	 * @param dimension
	 *            The Dimension of the component that contain the visualElements
	 */
	public RootContainer(PApplet app, Graph<Node, Edge> graph, int kindOfLayout, Dimension dimension) {
		this.graph = graph;
		this.app = app;

		switch (kindOfLayout) {
		// Circular layout
		case (0):
			CircleLayout<Node, Edge> circle = new CircleLayout<Node, Edge>(graph);
			circle.setSize(dimension);
			circle.setRadius(100);
			layout = circle;
			layoutCenter = new PVector(0, 0);
			break;
		// SpringLayout
		case (1):
			SpringLayout<Node, Edge> spring = new SpringLayout<Node, Edge>(graph);
			spring.setSize(dimension);
			layout = spring;
			layoutCenter = new PVector((float) (layout.getSize().getWidth() / 2),
					(float) (layout.getSize().getHeight() / 2));
			break;
		}

		// VFactories
		vNodes = visualNodeFactory();
		vEdges = visualEdgeFactory();
	}



}
