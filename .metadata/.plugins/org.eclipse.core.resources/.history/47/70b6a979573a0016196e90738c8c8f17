package graphElements;

import java.util.ArrayList;
import java.util.Observable;

public class Node extends Observable implements Comparable<Node> {

	private int inDegree, outDegree, Degree, id;
	private ArrayList<Integer> insideSubGraphs;
	private String name;
	private float Excentricity, Betweeness;

	public Node(int id) {
		this.id = id;
		insideSubGraphs = new ArrayList<Integer>();
	}

	public int compareTo(Node vertex) {
		return id - vertex.id;
	}

	// Methods community related
	public void includeInSubGraph(int arg) {
		insideSubGraphs.add(arg);
	}

	public boolean belongsTo(int communityID) {
		boolean rtn = false;
		for (Integer i : insideSubGraphs) {
			if (i.equals(communityID)) {
				rtn = true;
			} else
				rtn = false;
		}
		return rtn;
	}

	public String getSubGraphIDs() {
		String indexes = null;
		for (int i = 0; i < insideSubGraphs.size(); i++) {
			System.out.println("com: " + insideSubGraphs.get(i).toString()+ ",");
			indexes.concat(insideSubGraphs.get(i).toString() );
		}
		return indexes;
	}

	// *** Getters and setters
	public int getInDegree() {
		return inDegree;
	}

	public int getOutDegree() {
		return outDegree;
	}

	public int getDegree() {
		return Degree;
	}

	public int getId() {
		return id;
	}

	public String getName() {
		return name;
	}

	public float getExcentricity() {
		return Excentricity;
	}

	public float getBetweeness() {
		return Betweeness;
	}

	public void setInDegree(int inDegree) {
		this.inDegree = inDegree;
	}

	public void setOutDegree(int outDegree) {
		this.outDegree = outDegree;
	}

	public void setDegree(int degree) {
		Degree = degree;
	}

	public void setId(int id) {
		this.id = id;
	}

	public void setName(String name) {
		this.name = name;
	}

	public void setExcentricity(float excentricity) {
		Excentricity = excentricity;
	}

	public void setBetweeness(float betweeness) {
		Betweeness = betweeness;
	}

	public ArrayList<Integer> getMySubGraphs() {
		;
		return insideSubGraphs;
	}

	// Observer pattern
	public void change() {
		setChanged();
	}

	public void clear() {
		clearChanged();
	}

}
