package executable;

import java.util.ArrayList;

import comparators.InDegreeComparator;
import comparators.OutDegreeComparator;
import graphElements.Edge;
import graphElements.Graph;
import graphElements.Node;
import graphElements.SubGraph;
import utilities.Filter;
import utilities.visualArrangements.Container;
import visualElements.VCommunity;
import processing.core.*;

public class Logica {

	// Graph Elements
	Graph rootGraph;
	ArrayList<Graph> graphs;

	// Visual Elements
	ArrayList<Container> containers;
	Container rootContainer;
	ArrayList<VCommunity> vCommunities;
	VCommunity vRootCommunity;

	// RootGraph Parameters
	int nA = 15;
	int communities = 3;

	public Logica(PApplet app) {

		// Collection of both graph and subGraphs
		graphs = new ArrayList<Graph>();

		// ***** RootGraph *****
		rootGraph = randomGraphFactory(nA);
		rootGraph.setID(0);
		rootGraph.printEdges();
		// Container of visual rootGraph
		rootContainer = new Container(app, rootGraph);
		rootContainer.sort(new OutDegreeComparator());
		rootContainer.updateContainer();
		// Add to collections
		graphs.add(rootGraph); // always at position 0
		containers.add(rootContainer);
		// Instantiating & root community
		vRootCommunity = new VCommunity(app, rootContainer, app.width / 2, 150, 100);

		// ***** SubGraphs *****
		for (int i = 1; i <= communities; i++) {
			// SubGraph instantiation
			SubGraph tmp = new SubGraph();
			tmp.setID(i);
			tmp.setNodesFromGraph(rootGraph, i);
			tmp.printEdges();
			graphs.add(tmp);

			// SubGraph Containers
			Container cTmp = new Container(app, (SubGraph) graphs.get(1));
			cTmp.setRootGraph(rootGraph);
			cTmp.sort(new InDegreeComparator());
			cTmp.retrieveVisualElements(rootContainer);
			containers.add(cTmp);
			
			// SubGraph Communities
			vSubCommunity1 = new VCommunity(app, containerSubGraph1, 200, 350, 100);
		}



	}

	public void show(PApplet app) {
		vRootCommunity.show();
		vSubCommunity1.show();
	}

	// Factories
	private Graph randomGraphFactory(int graphSize) {
		Graph rtn = new Graph();
		ArrayList<Edge> edges = new ArrayList<Edge>();
		ArrayList<Node> nodes = new ArrayList<Node>();

		// create nodes
		for (int i = 0; i < graphSize; i++) {
			Node tmpA = new Node(i);
			nodes.add(tmpA);
		}

		// include node in communities
		for (int i = 0; i < graphSize; i++) {
			Node tmp = nodes.get((int) (Math.random() * graphSize));
			int com = (int) Math.round(Math.random() * communities);
			if (!tmp.belongsTo(com))
				tmp.includeInSubGraph(com);
		}

		// create edges
		edges = randomEdgeFactory(nodes);

		// Making the graph
		rtn = new Graph(nodes, edges);
		return rtn;
	}

	/**
	 * This class returns a list of edges with source and target chosen randomly
	 * according to a distribution filter (radial, sinusoidal, sigmoid, linear).
	 * The idea of the filter is to skew the distribution of source and target
	 * nodes so it is possible to emulate social phenomena distribution of links
	 * 
	 * @param nodes
	 * @return
	 */
	private ArrayList<Edge> randomEdgeFactory(ArrayList<Node> nodes) {
		Filter filter = new Filter(0, 1);
		ArrayList<Edge> rtn = new ArrayList<Edge>();
		// Gets a random integer using a filter. In this case I use a
		// sinusoidal to emulate a social phenomena
		for (int i = 0; i < nodes.size(); i++) {
			// source
			float val = filter.sinusoidal((float) Math.random());
			int src = PApplet.floor((val * (nodes.size() - 1)));
			// target
			val = filter.sinusoidal((float) Math.random());
			int trg = PApplet.floor((val * (nodes.size() - 1)));
			// edge
			Edge tmp = new Edge(nodes.get(src), nodes.get(trg), true);
			rtn.add(tmp);
		}
		return rtn;
	}

}
