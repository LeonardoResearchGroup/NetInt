package graphElements;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

public class Graph {

	protected ArrayList<Node> nodes;
	protected ArrayList<Edge> edges;
	private int ID;

	// Constructors
	public Graph() {

	}

	public Graph(ArrayList<Node> vertices, ArrayList<Edge> edges) {
		this.nodes = vertices;
		this.edges = edges;
		// Set Degree
		setDegree();
	}

	// Degree
	private void setDegree() {
		for (Node n : nodes) {
			setNodeDegree(n);
		}
	}

	private void setNodeInDegree(Node n) {
		int count = 0;
		for (Edge e : edges) {
			if (e.getTarget().equals(n)){
				count++;
			System.out.println("Graph>setNodeInDegree() e.getTarget id: "+ e.getTarget().getId());
			System.out.println("Graph>setNodeInDegree() n id: "+ n.getId());
			System.out.println("Graph>setNodeInDegree() count "+ count);
			}
		}
		n.setInDegree(count);
	}

	private void setNodeOutDegree(Node n) {
		int count = 0;
		for (Edge e : edges) {
			if (e.getSource().equals(n))
				count++;
		}
		n.setOutDegree(count);
	}

	private void setNodeDegree(Node n) {
		if (n.getInDegree() == 0) {
			setNodeInDegree(n);
		}
		if (n.getOutDegree() == 0) {
			setNodeOutDegree(n);
		}
		n.setDegree(n.getInDegree() + n.getOutDegree());
	}
	
	// Sorters
	public void sort(Comparator<Node> comp) {
		Collections.sort(getNodes(), comp);
	}

	// Getters and setters
	public ArrayList<Node> getNodes() {
		return nodes;
	}

	public ArrayList<Edge> getEdges() {
		return edges;
	}

	public ArrayList<Edge> getDirectedEdgesFrom(Node source) {
		ArrayList<Edge> edgeSubset = new ArrayList<Edge>();
		try {
			for (Edge e : edges) {
				if (e.getSource().equals(source)) {
					edgeSubset.add(e);
				}
			}
		} catch (NullPointerException e) {
			e.printStackTrace();
		}
		return edgeSubset;
	}

	public int size() {
		return nodes.size();
	}

	public int getID() {
		return ID;
	}

	public void setID(int iD) {
		ID = iD;
	}

	// Printers
	public void printNodes() {
		System.out.println("Graph>printNodes Graph: " + ID + " total Nodes: " + nodes.size());
		for (Node n : nodes) {
			String node = String.valueOf(n.getId());
			System.out.println("  Node Id: " + node);
		}
	}

	public void printEdges() {
		System.out.println("Graph>printEdges Graph: " + ID + " total Edges: " + edges.size());
		for (Edge e : edges) {
			String source = String.valueOf(e.getSource().getId());
			String target = String.valueOf(e.getTarget().getId());
			System.out.println("  Edge Source: " + source + " target: " + target);
		}
	}
}
