package executable;

import java.util.ArrayList;

import comparators.InDegreeComparator;
import comparators.OutDegreeComparator;
import graphElements.Edge;
import graphElements.Graph;
import graphElements.Node;
import graphElements.SubGraph;
import utilities.Filter;
import utilities.RandomGraphFactory;
import utilities.visualArrangements.Container;
import visualElements.VCommunity;
import processing.core.*;

public class Logica {

	// Graph Elements
	Graph rootGraph;
	ArrayList<Graph> graphs;
	RandomGraphFactory randomFactory;

	// Visual Elements
	Container rootContainer;
	VCommunity vRootCommunity;
	ArrayList<Container> containers;
	ArrayList<VCommunity> vCommunities;


	// RootGraph Parameters
	int nA = 15;
	int communities = 3;

	public Logica(PApplet app) {

		// Collection of both graph and subGraphs
		graphs = new ArrayList<Graph>();

		// ***** RootGraph *****
		rootGraph = randomFactory.makeRandomGraph(nA, communities);
		rootGraph.setID(0);
		rootGraph.printEdges();
		// Container of visual rootGraph
		rootContainer = new Container(app, rootGraph);
		rootContainer.sort(new OutDegreeComparator());
		rootContainer.updateContainer();
		// Add to collections
		graphs.add(rootGraph); // always at position 0
		containers.add(rootContainer);
		// Instantiating & root visual community
		vRootCommunity = new VCommunity(app, rootContainer, app.width / 2, 150);

		// ***** SubGraphs *****
		for (int i = 1; i <= communities; i++) {
			// SubGraph instantiation
			SubGraph tmp = new SubGraph();
			tmp.setID(i);
			tmp.setNodesFromGraph(rootGraph, i);
			tmp.printEdges();
			graphs.add(tmp);

			// SubGraph Containers
			Container cTmp = new Container(app, (SubGraph) graphs.get(1));
			cTmp.setRootGraph(rootGraph);
			cTmp.sort(new InDegreeComparator());
			cTmp.retrieveVisualElements(rootContainer);
			containers.add(cTmp);
			
			// SubGraph Communities
			VCommunity vComTmp = new VCommunity(app, cTmp, 200, 350);
		}



	}

	public void show(PApplet app) {
		vRootCommunity.show();
		vSubCommunity1.show();
	}
}
