package utilities.visualArrangements;

import java.awt.Dimension;
import java.util.ArrayList;
import java.util.ListIterator;

import edu.uci.ics.jung.graph.Graph;
import graphElements.Edge;
import graphElements.Node;
import visualElements.VEdge;
import visualElements.VNode;
import visualElements.interactive.VisualAtom;

public class SubContainer extends Container {

	public SubContainer(Graph<Node, Edge> subGraph, Container container, int kindOfLayout, Dimension dimension) {
		super(container.app, subGraph);

		distributeNodesInLayout(kindOfLayout, dimension);
		// Extraction of visual elements
		retrieveVisualElements3(container);
		this.runEdgeFactory();
		// NOTE: If you want a separate community from the source container run
		// remakeVisualElements()

	}

	/**
	 * Get instances of the visual elements from a given graph (usually
	 * rootGraph) that are included in the Container's subGraph
	 * 
	 * @param container
	 */
	private void retrieveVisualElements(Container sourceContainer) {
		// For each node of Graph
		for (Node n : graph.getVertices()) {

			// Look for the corresponding VNode in the collection of VAtoms
			for (VisualAtom vAtm : sourceContainer.getVNodes()) {

				// Get only the visualAtoms that are visual Nodes
				if (VNode.class.isInstance(vAtm)) {
					VNode vN = (VNode) vAtm;

					// If the current node of the subGraph matches the node of
					// the visual node retrieved from the collection of visual
					// atoms
					if (n.equals(vN.getNode())) {
						// Add the VNode to the collection of vAtoms of this
						// container
						vNodes.add(vN);
						// Look for all the edges of that VNode and add them all
						// to the collection of vEdges of this container
						vEdgeRetriever(vN, sourceContainer.getVEdges());
					}
				}
			}
		}
	}

	/**
	 * Get instances of the visual elements from a given graph (usually
	 * rootGraph) that are included in the Container's subGraph and set them the
	 * new coordinates according to the current layout
	 * 
	 * @param container
	 */
	private void retrieveVisualElements2(Container sourceContainer) {
		// For each node of Graph
		for (Node n : graph.getVertices()) {

			// Look for the corresponding VNode in the collection of VAtoms
			for (VisualAtom vAtm : sourceContainer.getVNodes()) {

				// Get only the visualAtoms that are visual Nodes
				if (VNode.class.isInstance(vAtm)) {
					VNode vN = (VNode) vAtm;

					/*
					 * If the current node of the subGraph matches the node
					 * inside the visual node retrieved from the collection of
					 * visual atoms
					 */
					if (n.equals(vN.getNode())) {
						// Add the VNode to the collection of vAtoms of this
						// container
						vN.setX((float) layout.getX(n));
						vN.setY((float) layout.getY(n));
						vNodes.add(vN);
						// Look for all the edges of that VNode and add them all
						// to the collection of vEdges of this container
						vEdgeRetriever(vN, sourceContainer.getVEdges());
					}
				}
			}
		}
	}

	private void retrieveVisualElements3(Container sourceContainer) {
		// For each node of Graph
		for (Node n : graph.getVertices()) {

			// Look for the corresponding VNode in the collection of VAtoms
			ListIterator<VNode> iterator = sourceContainer.getVNodes().listIterator();
			while (iterator.hasNext()) {
				// Get each visual Nodes
				VNode vN = (VNode) iterator.next();

				/*
				 * If the current node of the subGraph matches the node inside
				 * the visual node retrieved from the collection of visual atoms
				 */
				if (n.equals(vN.getNode())) {
					// Add the VNode to the collection of vAtoms of this
					// container
					vN.setX((float) layout.getX(n));
					vN.setY((float) layout.getY(n));
					vNodes.add(vN);
					// Look for all the edges of that VNode and add them all
					// to the collection of vEdges of this container
					vEdgeRemover(vN, sourceContainer.getVEdges());
					// Remove to node from the other container
					iterator.remove();
				}
			}
		}
	}

	/**
	 * Edges retriever (For SubGraphs). Invoked by retrieveVisualElements()
	 * 
	 * @param vNode
	 * @param rootEdgeList
	 */
	private void vEdgeRetriever(VNode vNode, ArrayList<VEdge> rootEdgeList) {
		for (VEdge vEdg : rootEdgeList) {
			// Check if the VNode source matches any of the VEdge sources in the
			// rootGraph
			if (vEdg.getSource().equals(vNode))
				vEdges.add(vEdg);
		}
	}

	/**
	 * Edges retriever (For SubGraphs). Invoked by retrieveVisualElements()
	 * 
	 * @param vNode
	 * @param rootEdgeList
	 */
	private void vEdgeRemover(VNode vNode, ArrayList<VEdge> rootEdgeList) {
		ListIterator<VEdge> iterator = rootEdgeList.listIterator();
		while (iterator.hasNext()) {
			VEdge vEdg = iterator.next();
			// Check if the VNode source matches any of the VEdge sources in the
			// rootGraph
			if (vEdg.getSource().equals(vNode))
				iterator.remove();
		}
	}

}
