package executable;

import java.util.Collection;
import java.util.Iterator;

import com.tinkerpop.blueprints.Graph;
import com.tinkerpop.blueprints.Vertex;
import com.tinkerpop.blueprints.Direction;
import com.tinkerpop.blueprints.Edge;


import edu.uci.ics.jung.graph.DirectedSparseMultigraph;

import graphElements.Node;
import utilities.GraphReader;

public class CommunityViz {

	DirectedSparseMultigraph<Node, graphElements.Edge> jungGraph;
	GraphReader reader;
	
	Graph tinkerGraph;; 

	public CommunityViz() {
		reader = new GraphReader("./data/graphs/Risk.graphml");
		jungGraph = reader.getJUNGDirectedGraph();
		tinkerGraph = reader.getTinkerGraph(); 
		printJungGraph();
		
		for(Edge e: tinkerGraph.getEdges()){
			System.out.println(e);
		}
		
		for(Vertex v: tinkerGraph.getVertices()){
			System.out.println(v);
		}
	}

	public void printJungGraph() {
		System.out.println("Nodes: " + jungGraph.getVertexCount());
		Collection<graphElements.Edge> edges = jungGraph.getEdges();
		for (graphElements.Edge e : edges) {
		//	System.out.println("from: " + e.getSource().getName() + " "+ e.getSource().getId() + " to: " + e.getTarget().getName()+ " "+ e.getTarget().getId());
			System.out.println("from: " + e.getSource().getId() + " to: " + e.getTarget().getId());

		}

		Collection<Node> nodes = jungGraph.getVertices();
		for (Node n : nodes) {
			System.out.print(n.getName() + " has ID: " + n.getId());
			System.out.println("  Predecessors count: " + jungGraph.getPredecessorCount(n));
		}
	}

	public static void main(String[] args) {
		CommunityViz graph = new CommunityViz();
	}
}
