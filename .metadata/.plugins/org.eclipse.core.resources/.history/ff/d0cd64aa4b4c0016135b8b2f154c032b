package gui;

import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;

import processing.core.*;

public class Zoom implements MouseListener, MouseMotionListener {

	// The scale of our world
	private float zoom;
	// A vector to store the offset from the center
	private PVector offset;
	// The previous offset
	private PVector poffset;
	// A Vector for the mouse position on the screen
	private PVector screenMouse;
	// A vector for the mouse position
	private PVector canvasMouse;
	// A Vector for the canvas center
	private PVector newCenter;
	// The PApplet
	public PApplet app;

	public Zoom(PApplet app) {
		this.app = app;
		zoom = 1;
		offset = new PVector(0, 0);
		poffset = new PVector(0, 0);
		screenMouse = new PVector(app.mouseX, app.mouseY);
		canvasMouse = new PVector(0, 0);
		newCenter = new PVector(app.width / 2, app.height / 2);
		app.addMouseListener(this);
		app.addMouseMotionListener(this);
	}

	public void run() {
		// **** Transformation of canvas
		// Everything must be drawn relative to center
		app.translate(app.width / 2, app.height / 2);
		// Use scale for 2D "zoom"
		app.scale(zoom);
		// The offset
		app.translate(offset.x, offset.y);

		// **** Convert screenMouse into canvasMouse
		// update screenMouse position
		screenMouse.set(new PVector(app.mouseX, app.mouseY));
		screenMouse.sub(newCenter);
		// translate to newCenter
		canvasMouse = PVector.sub(screenMouse, offset);
		// Zoom
		// canvasMouse.div(zoom);
		// Pan
		// canvasMouse.sub(offset);

		// **** Legends
		app.text("Screen mouse: " + screenMouse.toString(), screenMouse.x, screenMouse.y);
		app.text("Canvas mouse: " + getCanvasMouse().toString(), screenMouse.x, screenMouse.y + 10);
		app.text("Zoom: " + getZoomValue(), screenMouse.x - 30, screenMouse.y + 20);

	}

	public void pan() {
		offset.x = screenMouse.x - canvasMouse.x + poffset.x;
		offset.y = screenMouse.y - canvasMouse.y + poffset.y;
	}

	public PVector getOffset() {
		return offset;
	}

	public void updatePOffset() {
		poffset.set(offset);
	}

	public PVector getMouse() {
		return canvasMouse;
	}

	public float getZoomValue() {
		return zoom;
	}

	// Zoom in keyboard
	public void in(float val) {
		zoom += val;
	}

	// Zoom out keyboard
	public void out(float val) {
		zoom -= val;
		if (zoom < 0.1) {
			zoom = 0.1f;
		}
	}

	@Override
	public void mouseClicked(MouseEvent arg0) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mouseEntered(MouseEvent arg0) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mouseExited(MouseEvent arg0) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mousePressed(MouseEvent arg0) {
		updatePOffset();

	}

	@Override
	public void mouseReleased(MouseEvent arg0) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mouseDragged(MouseEvent e) {
		pan();
	}

	@Override
	public void mouseMoved(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	public PVector getCanvasMouse() {
		// TODO Auto-generated method stub
		return canvasMouse;
	}
}
